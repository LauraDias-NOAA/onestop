package org.cedar.onestop.gateway.config;

import org.springframework.security.oauth2.client.registration.ReactiveClientRegistrationRepository;
import org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter;

public class LoginGovAuthenticationConverter extends ServerOAuth2AuthorizationCodeAuthenticationTokenConverter {

  public LoginGovAuthenticationConverter(ReactiveClientRegistrationRepository clientRegistrationRepository) {
    super(clientRegistrationRepository);
  }

//  @Override
//  public Mono<Authentication> convert(ServerWebExchange serverWebExchange) {
////    //Mono<Authentication> authentication = super.convert(serverWebExchange);
////    return Mono.justOrEmpty(serverWebExchange)
////        .flatMap(AuthorizationHeader::extract)
////        .filter(matchBearerLength)
////        .flatMap(isolateBearerValue)
////        .flatMap(jwtVerifier::check)
////        .flatMap(UsernamePasswordAuthenticationBearer::create).log();
//
//  }

  //  private ClientRegistrationRepository clientRegistrationRepository
//  private KeystoreUtil keystoreUtil
//
//  LoginGovTokenRequestConverter(ClientRegistrationRepository clientRegistrationRepository, KeystoreUtil keystoreUtil) {
//    this.clientRegistrationRepository = clientRegistrationRepository
//    this.keystoreUtil = keystoreUtil
//  }
//
//  @Override
//  RequestEntity<?> convert(OAuth2AuthorizationCodeGrantRequest authorizationCodeGrantRequest) {
//    RequestEntity<?> originalRequestEntity = super.convert(authorizationCodeGrantRequest)
//    String registrationId = resolveRegistrationId(authorizationCodeGrantRequest)
//    if(registrationId == LoginGovConstants.LOGIN_GOV_REGISTRATION_ID) {
//      ClientRegistration clientRegistration = clientRegistrationRepository.findByRegistrationId(registrationId)
//      String clientId = clientRegistration.clientId
//      String clientSecret = clientRegistration.clientSecret
//      String tokenUri = clientRegistration.providerDetails.tokenUri
//      Long expirationTime = LoginGovConstants.LOGIN_GOV_TOKEN_EXPIRATION_TIME
//
//      String jwt = JWT.create()
//          .withSubject(clientId)
//          .withIssuer(clientId)
//          .withAudience(tokenUri)
//          // Should be an un-guessable, random string generated by the client
//          .withJWTId(UUID.randomUUID().toString())
//          .withExpiresAt(new Date(System.currentTimeMillis() + expirationTime))
//          .sign(Algorithm.RSA256(keystoreUtil.rsaPublicKey(), keystoreUtil.rsaPrivateKey()))
//
//      HttpHeaders headers = originalRequestEntity.headers
//      MultiValueMap<String, String> formParameters = originalRequestEntity.body as MultiValueMap<String, String>
//          URI uri = originalRequestEntity.url
//
//      formParameters.add("client_assertion", jwt)
//      formParameters.add("client_assertion_type", LoginGovConstants.LOGIN_GOV_CLIENT_ASSERTION_TYPE)
//      return new RequestEntity<?>(formParameters, headers, HttpMethod.POST, uri)
//    }
//  }
//
//  private String resolveRegistrationId(OAuth2AuthorizationCodeGrantRequest authorizationCodeGrantRequest) {
//    return authorizationCodeGrantRequest.authorizationExchange.authorizationRequest.additionalParameters.get(OAuth2ParameterNames.REGISTRATION_ID) as String
//  }

}
