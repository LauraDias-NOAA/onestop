sourceCompatibility = 11
targetCompatibility = 11

configurations {
  integrationTestImplementation.extendsFrom testImplementation
  integrationTestRuntime.extendsFrom testRuntime
  integrationTestRuntimeOnly.extendsFrom testRuntimeOnly
}

dependencies {
//    implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
    implementation("org.springframework.boot:spring-boot-starter-data-jpa")
    implementation 'org.springframework.boot:spring-boot-starter-web'
//    implementation 'org.springframework.boot:spring-boot-starter-webflux'
//    runtimeOnly 'io.r2dbc:r2dbc-postgresql'
    runtimeOnly 'org.postgresql:postgresql'
    testImplementation('org.springframework.boot:spring-boot-starter-test')

    testImplementation("org.spockframework:spock-spring:${Versions.SPOCK}")
    testImplementation("org.spockframework:spock-core:${Versions.SPOCK}")
//    testImplementation 'org.springframework.boot.experimental:spring-boot-test-autoconfigure-r2dbc'
//    testImplementation 'io.projectreactor:reactor-test'
}

//dependencyManagement {
//    imports {
//        mavenBom 'org.springframework.boot.experimental:spring-boot-bom-r2dbc:0.1.0.M3'
//    }
//}

//test {
//    useJUnitPlatform()
//}
sourceSets {
  integrationTest {
    compileClasspath += sourceSets.main.output + sourceSets.test.output
    runtimeClasspath += sourceSets.main.output + sourceSets.test.output
    groovy.srcDir file('src/integrationTest/groovy')
    resources.srcDir file('src/integrationTest/resources')
  }
}

task integrationTest(type: Test) {
  description = 'Runs the integration tests'
  group = 'verification'
  testClassesDirs = sourceSets.integrationTest.output.classesDirs
  classpath = sourceSets.integrationTest.runtimeClasspath
  outputs.upToDateWhen { false }
  shouldRunAfter test

  reports.junitXml.destination = file("${buildDir}/integration-test-results")
  reports.html.destination =  file("${buildDir}/reports/integrationTests")
}

check.dependsOn integrationTest

bootJar {
  classifier = 'all' // add a classifier to distinguish the executable jar
  baseName = "${rootProject.name}-${project.name}"
  launchScript()
}

task sourceJar(type: Jar) {
  classifier = 'sources'
  baseName = "${rootProject.name}-${project.name}"
  from "${projectDir}/src"
}

assemble.dependsOn(sourceJar)
assemble.dependsOn(bootJar)

// Do something silly to ensure federal tasks that are called in Jenkins still effectively call jib
task BuildDockerImage {
  group "jib"
  dependsOn jibDockerBuild
}
task PublishDockerImage {
  group "jib"
  dependsOn jib
}

jib {
  use(PublishingKt) {
    def publish = project.publish

    from {
      //base image
      image = 'gcr.io/distroless/java:11'
    }
    to {
      image = publish.repository()
      auth {
        username = publish.username
        password = publish.password
      }
    }
    container {
      creationTime = publish.created.toString()
      labels = publish.ociAnnotations()
      ports = ['8080', '9090']
    }
  }
}