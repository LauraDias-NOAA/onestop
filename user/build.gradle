sourceCompatibility = 11
targetCompatibility = 11

configurations {
  integrationTestImplementation.extendsFrom testImplementation
  integrationTestRuntime.extendsFrom testRuntime
  integrationTestRuntimeOnly.extendsFrom testRuntimeOnly
}

dependencies {
  implementation("org.codehaus.groovy:groovy:${Versions.GROOVY}")
  implementation("org.codehaus.groovy:groovy-json:${Versions.GROOVY}")
  implementation("org.springframework.boot:spring-boot-starter-data-jpa")
  implementation 'org.springframework.boot:spring-boot-starter-web'
  runtimeOnly 'org.postgresql:postgresql'
  implementation("io.springfox:springfox-swagger2:2.9.2")
  implementation("io.springfox:springfox-swagger-ui:2.9.2")

  // reactive async dependencies
//  implementation 'org.springframework.boot:spring-boot-starter-webflux'
//  runtimeOnly 'io.r2dbc:r2dbc-postgresql'
//  compile group: 'org.springframework.data', name: 'spring-data-r2dbc', version: '1.0.0.RELEASE'

  testImplementation('org.springframework.boot:spring-boot-starter-test')
  testImplementation("org.spockframework:spock-spring:${Versions.SPOCK}")
  testImplementation("org.spockframework:spock-core:${Versions.SPOCK}")
  testImplementation("org.testcontainers:postgresql:1.13.0")

  // reactive test dependencies
//    testImplementation 'org.springframework.boot.experimental:spring-boot-test-autoconfigure-r2dbc'
//    testImplementation 'io.projectreactor:reactor-test'

  // -- Pac4j Authentication --
  implementation "org.pac4j:pac4j-core:4.0.0"
  implementation "org.pac4j:spring-webmvc-pac4j:4.0.0"
  implementation "org.pac4j:pac4j-oidc:4.0.0"
  implementation "org.pac4j:pac4j-cas:4.0.0" // TODO: REMOVE
}

test {
    useJUnitPlatform()
}
sourceSets {
  integrationTest {
    compileClasspath += sourceSets.main.output + sourceSets.test.output
    runtimeClasspath += sourceSets.main.output + sourceSets.test.output
    groovy.srcDir file('src/integrationTest/groovy')
    resources.srcDir file('src/integrationTest/resources')
  }
}

task integrationTest(type: Test) {
  description = 'Runs the integration tests'
  group = 'verification'
  testClassesDirs = sourceSets.integrationTest.output.classesDirs
  classpath = sourceSets.integrationTest.runtimeClasspath
  outputs.upToDateWhen { false }
  shouldRunAfter test

  reports.junitXml.destination = file("${buildDir}/integration-test-results")
  reports.html.destination = file("${buildDir}/reports/integrationTests")
}

check.dependsOn integrationTest

bootJar {
  classifier = 'all' // add a classifier to distinguish the executable jar
  baseName = "${rootProject.name}-${project.name}"
  launchScript()
}

task sourceJar(type: Jar) {
  classifier = 'sources'
  baseName = "${rootProject.name}-${project.name}"
  from "${projectDir}/src"
}

assemble.dependsOn(sourceJar)
assemble.dependsOn(bootJar)

// Do something silly to ensure federal tasks that are called in Jenkins still effectively call jib
task BuildDockerImage {
  group "jib"
  dependsOn jibDockerBuild
}
task PublishDockerImage {
  group "jib"
  dependsOn jib
}

jib {
  use(PublishingKt) {
    def publish = project.publish

    from {
      //base image
      image = 'gcr.io/distroless/java:11'
    }
    to {
      image = publish.repository()
      auth {
        username = publish.username
        password = publish.password
      }
    }
    container {
      creationTime = publish.created.toString()
      labels = publish.ociAnnotations()
      ports = ['8080']
    }
  }
}