plugins {
  id 'groovy'
  id "org.springframework.boot" // version declared in top-level buildscript
  id "io.spring.dependency-management"
  id 'com.google.cloud.tools.jib' version '1.6.1'
  id "com.moowork.node"
}

apply from: "${rootDir}/gradle/publishing.gradle"

sourceCompatibility = 11
targetCompatibility = 11

configurations {
  implementation.exclude module: 'tomcat-annotations-api', group: 'org.apache.tomcat'
  testImplementation.exclude(group: 'ch.qos.logback')
  integrationTestImplementation.extendsFrom testImplementation
  integrationTestRuntime.extendsFrom testRuntime
  integrationTestRuntimeOnly.extendsFrom testRuntimeOnly
  
  schemaDefinitions
}

dependencies {
  implementation("org.codehaus.groovy:groovy:${project.groovyVersion}")
  implementation("org.codehaus.groovy:groovy-json:${project.groovyVersion}")
  implementation("org.springframework.boot:spring-boot-starter-web")
  implementation("org.springframework.boot:spring-boot-starter-webflux")
  implementation("org.apache.kafka:kafka-streams:${project.kafkaVersion}")
  implementation("org.apache.kafka:kafka-clients:${project.kafkaVersion}")
  implementation("io.confluent:kafka-streams-avro-serde:${project.confluentVersion}")
  implementation("com.github.cedardevs.schemas:schemas-core:${project.schemasVersion}")
  implementation(project(':kafka-common'))
  implementation("org.json:json:20190722")
  
  // -- CAS Authentication --
  implementation "org.pac4j:spring-webmvc-pac4j:3.2.0"
  implementation "org.pac4j:pac4j-cas:3.8.3"

  //used to copy schema definitions to generate openAPI 
  schemaDefinitions ("com.github.cedardevs.schemas:schemas-core:${project.schemasVersion}")

  compileOnly("org.springframework.boot:spring-boot-starter-tomcat")

  runtime("org.springframework.boot:spring-boot-devtools")

  testImplementation("org.springframework.boot:spring-boot-starter-test")
  testImplementation("org.spockframework:spock-spring:${project.spockVersion}")
  testImplementation("org.spockframework:spock-core:${project.spockVersion}")
  testImplementation("org.codehaus.groovy.modules.http-builder:http-builder:0.7.1")
  testImplementation("org.springframework.boot:spring-boot-starter-test")
  testImplementation("org.springframework.kafka:spring-kafka-test:${project.springKafkaVersion}")
  testImplementation("org.apache.kafka:kafka-streams-test-utils:${project.kafkaVersion}")
  testImplementation("org.apache.kafka:kafka-clients:${project.kafkaVersion}:test")
  testImplementation("org.apache.kafka:kafka_2.12:${project.kafkaVersion}")
  testImplementation("org.apache.kafka:kafka_2.12:${project.kafkaVersion}:test")
  testImplementation("io.confluent:kafka-schema-registry:${project.confluentVersion}")
  testImplementation("io.confluent:kafka-schema-registry:${project.confluentVersion}:tests")
  testImplementation("com.github.java-json-tools:json-schema-validator:2.2.10")
  testImplementation("com.github.cedardevs.schemas:schemas-core:${project.schemasVersion}:test")
}

sourceSets {
  integrationTest {
    compileClasspath += sourceSets.main.output + sourceSets.test.output
    runtimeClasspath += sourceSets.main.output + sourceSets.test.output
    groovy.srcDir file('src/integrationTest/groovy')
    resources.srcDir file('src/integrationTest/resources')
  }
}

task integrationTest(type: Test) {
  description = 'Runs the integration tests'
  group = 'verification'
  testClassesDirs = sourceSets.integrationTest.output.classesDirs
  classpath = sourceSets.integrationTest.runtimeClasspath
  outputs.upToDateWhen { false }
  shouldRunAfter test

  reports.junitXml.destination = file("${buildDir}/integration-test-results")
  reports.html.destination =  file("${buildDir}/reports/integrationTests")
}

check.dependsOn integrationTest

bootJar {
  dependsOn { 'generateOpenApi' }
  classifier = 'all' // add a classifier to distinguish the executable jar
  baseName = "${rootProject.name}-${project.name}"
  launchScript()
}

task sourceJar(type: Jar) {
  classifier = 'sources'
  baseName = "${rootProject.name}-${project.name}"
  from "${projectDir}/src"
}

task extractSchemaDefinitions(type: Copy) {
  dependsOn configurations.schemaDefinitions
  from { // use of closure defers evaluation until execution time
    configurations.schemaDefinitions.collect {
      zipTree(it).matching{
        include 'json/schema-definitions.json'
      }
    }
  }

  into "$buildDir/resources/main"
}

node {
  version = '10.15.3'
  npmVersion = '6.1.0'
  download = true
}

// NOTE: The 'build' task defined in package.json pipes the output directly to the output file
task generateOpenApi(type: NpmTask) {
  dependsOn { ['npmInstall', 'extractSchemaDefinitions', 'processResources'] }
  args = ['run', 'build']
  outputs.file("$buildDir/resources/main/static/openapi.yaml")
}

assemble.dependsOn(sourceJar)
assemble.dependsOn(bootJar)

task BuildDockerImage {
  group "jib"
  dependsOn jibDockerBuild
}
task PublishDockerImage {
  group "jib"
  dependsOn jib
}

jib {
  // derive image repository
  String imageRegistryURL = "registry.hub.docker.com"
  String imageNamespace = "cedardevs"
  String imageName = "${rootProject.name}-${project.name}".toString()
  String imageTag = "${project.version}".toString()
  String imageRepository = "${imageRegistryURL}/${imageNamespace}/${imageName}:${imageTag}".toString()

  from {
    //base image
    image = 'gcr.io/distroless/java:11'
  }
  to {
    image = imageRepository
    auth {
      username = System.getenv('DOCKER_USER').toString().trim()
      password = System.getenv('DOCKER_PASSWORD').toString().trim()
    }
  }
  container {
    creationTime = project.buildDate.toString()
    // https://github.com/opencontainers/image-spec/blob/master/annotations.md
    labels = [
        'org.opencontainers.image.created': project.buildDate.toString(),
        'org.opencontainers.image.ref.name': imageName,
        'org.opencontainers.image.description': 'A registry API for PSI.',
        'org.opencontainers.image.source': project.getVcsUrl().toString(),
        'org.opencontainers.image.revision': project.getVcsRef().toString(),
        'org.opencontainers.image.vendor': imageNamespace,
        'org.opencontainers.image.version': imageTag,
    ]
    ports = ['8080', '9090']
  }
}
