import org.testcontainers.elasticsearch.ElasticsearchContainer
buildscript {
  repositories {
    mavenCentral()
  }
  dependencies {
    classpath "org.testcontainers:elasticsearch:1.12.5"
    classpath "org.testcontainers:kafka:1.12.5"
  }
}

plugins {
  id 'groovy'
  id 'application'
  id 'com.google.cloud.tools.jib' version '1.6.1'
  id "com.github.johnrengelman.shadow" version "4.0.3"
}

apply from: "${rootDir}/gradle/publishing.gradle"

mainClassName = 'org.cedar.onestop.indexer.IndexerApp'

repositories {
  mavenCentral()
}

sourceCompatibility = 11
targetCompatibility = 11

configurations {
  integrationTestCompile.extendsFrom testCompile
  integrationTestRuntime.extendsFrom testRuntime
  integrationTestRuntimeOnly.extendsFrom testRuntimeOnly
  integrationTestImplementation.extendsFrom testImplementation
}

dependencies {
  implementation(project(':kafka-common'))
  implementation(project(':elastic-common'))
  implementation("com.github.cedardevs.schemas:schemas-core:${project.schemasVersion}")
  implementation("com.github.cedardevs.schemas:schemas-parse:${project.schemasVersion}")
  implementation("com.github.cedardevs.schemas:schemas-analyze:${project.schemasVersion}")
  implementation("org.apache.kafka:kafka-streams:${project.kafkaVersion}")
  implementation("org.apache.kafka:kafka-clients:${project.kafkaVersion}")
  implementation("io.confluent:kafka-streams-avro-serde:${project.confluentVersion}")
  implementation("org.elasticsearch.client:elasticsearch-rest-high-level-client:${project.esVersion}")
  implementation("org.yaml:snakeyaml:${project.snakeYamlVersion}")
  implementation("org.slf4j:slf4j-api:1.7.25")
  implementation("ch.qos.logback:logback-classic:1.2.3")
  implementation("org.apache.commons:commons-text:1.2")


  testImplementation(project(path: ':elastic-common', configuration: 'testElastic'))
  testImplementation("org.objenesis:objenesis:3.1")
  testImplementation("net.bytebuddy:byte-buddy:1.7.11")
  testImplementation("org.spockframework:spock-core:${project.spockVersion}")
  testImplementation("org.apache.kafka:kafka-streams-test-utils:${project.kafkaVersion}")
  testImplementation("org.springframework.kafka:spring-kafka-test:${project.springKafkaVersion}")
  testImplementation("org.apache.kafka:kafka-clients:${project.kafkaVersion}:test")
  testImplementation("org.apache.kafka:kafka_2.12:${project.kafkaVersion}")
  testImplementation("org.apache.kafka:kafka_2.12:${project.kafkaVersion}:test")
  testImplementation("io.confluent:kafka-schema-registry:${project.confluentVersion}")
  testImplementation("io.confluent:kafka-schema-registry:${project.confluentVersion}:tests")
  testImplementation("com.github.cedardevs.schemas:schemas-core:${project.schemasVersion}:test")
  testImplementation("com.github.cedardevs.schemas:schemas-core:${project.schemasVersion}:sources")
}

sourceSets {
  integrationTest {
    compileClasspath += sourceSets.main.output + sourceSets.test.output
    runtimeClasspath += sourceSets.main.output + sourceSets.test.output
    groovy.srcDir file('src/integrationTest/groovy')
    resources.srcDir file('src/integrationTest/resources')
  }
}

task integrationTest(type: Test) {
  doFirst {
    // `CI` env var is typically "true" inside CircleCI, Travis, and other CI environments.
    // If you find it is not, the build cmds used within your CI config could also be prefixed like:
    // `export CI=true && ./gradlew integrationTest ...`
    Boolean ci = Boolean.valueOf(System.getenv('CI'))
    if (ci) {
      // the elasticsearch brought up by CircleCI (see `.circleci/config`) runs on localhost:9200
      systemProperty 'elasticsearch.host', 'localhost'
      systemProperty 'elasticsearch.port', '9200'
      systemProperty 'elasticsearch.ssl.enabled', false
    }
    else {
      def elasticsearchContainer = new ElasticsearchContainer("docker.elastic.co/elasticsearch/elasticsearch:${project.esVersion}")
      elasticsearchContainer.start()
      systemProperty 'elasticsearch.host', 'localhost'
      systemProperty 'elasticsearch.port', elasticsearchContainer.getMappedPort(9200)
      systemProperty 'elasticsearch.ssl.enabled', false

      project.ext.set("elasticsearchContainer", elasticsearchContainer)
    }
  }

  description = 'Runs the integration tests'
  group = 'verification'
  testClassesDirs = sourceSets.integrationTest.output.classesDirs
  classpath = sourceSets.integrationTest.runtimeClasspath
  outputs.upToDateWhen { false }
  shouldRunAfter test
  finalizedBy { killElasticsearch }

  reports.junitXml.destination = file("${buildDir}/integration-test-results")
  reports.html.destination = file("${buildDir}/reports/integrationTests")
}
check.dependsOn integrationTest
task killElasticsearch {
  doFirst {
    if (project.extensions.hasProperty("elasticsearchContainer")) {
      project.ext.get("elasticsearchContainer").stop()
    }
  }
}

jar {
  archivesBaseName = "${rootProject.name}-${project.name}"
  manifest {
    attributes 'Main-Class': mainClassName
  }
}
// check http://imperceptiblethoughts.com/shadow/
shadowJar {
  baseName = "${rootProject.name}-${project.name}"
  classifier = 'all'
  version = version
  configurations = [project.configurations.compile]
}

task sourceJar(type: Jar) {
  classifier = 'sources'
  baseName = "${rootProject.name}-${project.name}"
  from "${projectDir}/src"
}

assemble.dependsOn(sourceJar)

task BuildDockerImage {
  group "jib"
  dependsOn jibDockerBuild
}
task PublishDockerImage {
  group "jib"
  dependsOn jib
}

jib {
  // derive image repository
  String imageRegistryURL = "registry.hub.docker.com"
  String imageNamespace = "cedardevs"
  String imageName = "${rootProject.name}-${project.name}".toString()
  String imageTag = "${project.version}".toString()
  String imageRepository = "${imageRegistryURL}/${imageNamespace}/${imageName}:${imageTag}".toString()

  from {
    //base image
    image = 'gcr.io/distroless/java:11'
  }
  to {
    image = imageRepository
    auth {
      username = System.getenv('DOCKER_USER').toString().trim()
      password = System.getenv('DOCKER_PASSWORD').toString().trim()
    }
  }
  container {
    creationTime = project.buildDate.toString()
    // https://github.com/opencontainers/image-spec/blob/master/annotations.md
    labels = [
        'org.opencontainers.image.created': project.buildDate.toString(),
        'org.opencontainers.image.ref.name': imageName,
        'org.opencontainers.image.description': 'A stream manager API for PSI.',
        'org.opencontainers.image.source': project.getVcsUrl().toString(),
        'org.opencontainers.image.revision': project.getVcsRef().toString(),
        'org.opencontainers.image.vendor': imageNamespace,
        'org.opencontainers.image.version': imageTag,
    ]
  }
}
